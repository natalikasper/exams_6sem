1. можно пользоваться своими пк и сваоими лабами
2. 1ый mvc, 2ой core, 3ий лаба
3. нужно писать отдельный код по примерам, а не полностью лабы
4. скажет что хочет видеть в коде
5. инъекций в представлении не будет
6. по первым вопросам что демонстрировать - js - написать fetch/xmlhttprequest
					    html - api dom
					    показать как исп css
					    как исп.селекторы css
				 	    dom - изменить что-то или найти св-во
					    корнкретно скажет на экзамене
7. 7ой вопрос - вот запрос, вот обработка
8. когда придем - он уточнит то, что надо увидеть
9. 4ый вопрос по ws - пример на asp (handler, controller - что угодно, чтобы работало по ws)
10. может попросить находу что-то изменить
11. отталкиваться будет от того, как мы отвечаем и что говорим
12. по 10 минут на человека
13. через полчаса первый будет отвечать
14. 6 человек сразу заходят

15. люди не понимают основ
16. отправили запрос, как проходит, где застревает, куда поступает
17. многие не могут запустить консольное приложение (wcf не могут запустить, core)
18. нету лаб - плохо оценивается
19. экзамен в субботу в 10.00
20. заходим по 6 человек
21. первый выйдет минут через 40-50
22. стараться бодро отвечать (что такое асп, асп нет коре, какие отличия от нет, сервисы асмх, 
	дабсф, что такое влсд, какого уровня протоколы, для чего какие протоколы, где какие 
	данные перемещаются)   
23. уметь видеть заголовки и т.д.
24. в 1ой части упоминается жц представления и модели 
	(в лк не было, имеется ввиду в какой форме 
	хранится - cshtml файл, где вызывается - вызывается в контроллере с помощью 
	вспомогательного метода view(), 
		что происхожит? работает razor engine, кот делает с класс из страницы и ыормрует респонсе. 
		пока не перезагрузим приложение этот класс используется в качестве вью)
	жц модели - модель создается в запросе 
		(если в асп дот нет модель начинает работать когда создаем в контроллере, 
			исп.методы, когда контроллер завершает работу - умирает)
		коре - 1 раз создали при создании приложения и юзам в процессе работы приложения
25. работа на своих пк
26. можно пользоваться всем
27. не брать лабу, а только маленький кусок кода
28. код обычно смотрит быстро, редко просит более детально показать
29. главное - показать как работает и знать где все реализовано